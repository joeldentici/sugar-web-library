const Files = require('./files.js');
const F = require('./filters.js');
const {OK} = require('./successful.js');
const {FORBIDDEN} = require('./requesterrors.js');
const {INTERNAL_ERROR} = require('./servererrors.js');
const Events = require('./events.js');
const A = require('./authentication.js');
const jwt = require('../util/jwt.ejs');
const {mime} = require('./output.js');
const {Async, Utility} = require('monadic-js');
const {caseOf} = Utility;

/**
 *	Sugar.Combinators.CQRS
 *	written by Joel Dentici
 *	on 7/13/2017
 *
 *	This module provides combinators for creating
 *	CQRS applications and services.
 *
 *	These combinators take objects that fulfill an
 *	interface for some service type and return WebParts
 *	that expose those services over HTTP. They also perform
 *	authentication of user details associated with the request,
 *	using JWT.
 */

/**
 *	IWriteService :: Object
 *
 *	An IWriteService is an object with an <code>execute</code>
 *	method, which takes two object arguments. The first is
 *	the command to run and the second is the user payload.
 *
 *	The <code>execute</code> method returns an Async e a
 *	where e is a type handled by the IErrorMapper and a is
 *	a type that can be JSON serialized.
 */

/**
 *	IAuthService :: Object
 *
 *	An IAuthService is an object with an <code>authenticate</code>
 *	method, which takes a single object argument. The service uses
 *	this to authenticate a user.
 *
 *	This method returns an <code>Async e a</code> where <code>e</code>
 *	is the type handled by an IErrorMapper and <code>a</code> is the
 *	type for whatever claims you intend to pass back to a client and
 *	use for authorization at a later time.
 */

/**
 *	IQueryService :: Object
 *
 *	An IQueryService is an object with an <code>query</code> method,
 *	which takes a two object arguments. The first specifies the arguments
 *	for the query and the second contains the details of the user's token,
 *	or is undefined if authentication is not being used.
 *
 *	The method returns an <code>Async e a</code> where <code>e</code>
 *	is the type handled by an IErrorMapper and <code>a</code> is the
 *	type for a successful result. The WebPart combinator queryService
 *	performs some special handling on a non-error result:
 *
 *		If the result is a file, we send it using the File combinators
 *		If the result is a event stream (observable), we send it using the Event combinators
 *		Otherwise the result is a type that can be JSON serialized, and we send it
 *		in a normal OK 200 response with the application/json content-type
 */

/**
 *	IErrorMapper :: e -> WebPart
 *
 *	An IErrorMapper is a function that takes
 *	an error and returns a WebPart. It should case the error on
 *	the expected errors to determine what WebPart to construct.
 *
 *	You may use whatever content-type you want for your error handler
 *	WebParts, but you may make it more difficult to implement client
 *	applications if you use different types.
 */

/**
 *	IResultMapper :: r -> WebPart
 *
 *	Like IErrorMapper, but for actual results.
 */

/**
 *	CryptoInformation :: (string, string, string, IBlackList?)
 *
 *	Crypto information is used to construct an authentication
 *	WebPart combinator.
 */

/**
 *	AuthInformation :: (string, string, string)
 *
 *	Auth information is used to construct a JWT
 */

/**
 *	IAuthenticator :: Object
 *
 *	An IAuthenticator is an Object with a <code>createToken</code>
 *	method that takes a first argument of any type and
 *	a second argument of expiration time (int). The result is an 
 *	<code>Either AuthenticationError string</code>.
 *
 *	This should perform the opposite operation of whatever your
 *	Authenticator performs.
 */

/**
 *	Authenticator :: (WebPart, IErrorMapper) -> WebPart
 *
 *	A WebPart combinator that checks user credentials before
 *	applying the WebPart it receives.
 *
 *	This should perform the opposite operation of whatever your
 *	IAuthenticator performs.
 */

/**
 *	ServiceInfo :: Object
 *
 *	Service info is a configuration object that specifies
 *	the path (string), IWriteService | IAuthService | IQueryService,
 *	an IErrorMapper, and a IResultMapper. The result mapper
 *	and error mapper are optional. The default error mapper
 *	will try your error mapper first, and on anything else
 *	JSON serialize the error message. The default result mapper
 *	behavior varies on combinator type.
 *
 *	properties: path, service, resultMapper, errorMapper
 */

/**
 *	AuthServiceInfo :: Object
 *
 *	A configuration object with all the properties of ServiceInfo,
 *	plus an integer expiration time
 *
 *	properties: path, service, resultMapper, errorMapper, expirationTime
 */

/**
 *	writeService :: CryptoInformation | Authenticator -> ServiceInfo -> WebPart
 *
 *	Constructs a combinator that wraps services in a WebPart.
 *
 *	This constructor takes a tuple of private key, public key,
 *	and algorithm to be used for JWT authentication. The returned
 *	combinator takes a path, IWriteService and IErrorMapper.
 *
 *	The resulting WebPart after applying the combinator will filter
 *	out non-POST method requests that don't match the path for the
 *	service, as well as any requests that cannot be authenticated. It
 *	is of course up to the service to authorize commands before processing
 *	them.
 *
 *	The result of a successful command will be a JSON encoded value in a 200 OK
 *	response. The result of a failed command depends on what the provided error
 *	mapper does to handle it.
 */
exports.writeService = function(privateKey, publicKey, alg, blacklist) {
	//load an authentication web part for the provided crypto information
	const authenticate = makeAuth(privateKey, publicKey, alg, blacklist);

	//return function that will construct a WebPart for a specific service
	return (serviceInfo) => {
		const defaultResult = expr {n => x => n(x) || (
			OK(JSON.stringify(x)) >=> mime('application/json')
		)};

		const {path, service, resultMapper, errorMapper} = commonChecks(
			'writeService', 'IWriteService', 'execute', defaultResult,
			serviceInfo
		);


		//extracts command from HttpRequest and runs it on the service
		function runCommand(context) {
			//try running the command on the service
			return Async.try(do Async {
				command = context.request.form || context.request.body
				userDetails = context.userToken

				//result from executing the command
				res <- service.execute(command, userDetails)

				return resultMapper(res)
			})
			//map any errors that occur to WebParts
			.catch(e => Async.of(errorMapper(e)))
			//execute the WebPart on the context
			.chain(wp => wp(context));
		}

		//filter out requests that are not POST method or are for
		//a different url, as well as any that we cannot authenticate
		return expr {
			F.POST >=> F.path(path) >=> 
			if (authenticate) 
				authenticate(runCommand, errorMapper)
			else
				runCommand
		};
	}
}

/**
 *	authService :: (string, string, string) -> (string, IAuthService, IErrorMapper, int) -> WebPart
 *
 *	Constructs a combinator for creating a specialized service that authenticates
 *	user credentials. This function works exactly like writeService, but works with
 *	an IAuthService (which can also be an IWriteService).
 *
 *	The request must match the specified path and must be a POST request. The error
 *	mapper is used to map errors to WebParts. The integer argument specifies the amount
 *	of time in milliseconds after which the token will expire.
 *
 *	The results returned by the WebPart will be JWT that have been encoded, in a text/plain
 *	response.
 *
 *	NOTE: This is not for the service that provides user account management. Although
 *	you can use the same JavaScript service object (ie, it implements IAuthService and
 *	one or more of IWriteService, IQueryService) to provide that functionality as the one
 *	you use for authentication, you must construct additional writeService and readService
 *	WebParts to hook it into Sugar.
 */
exports.authService = function(privateKey, publicKey, alg) {
	const auth = typeof privateKey === 'object' ? privateKey :
		{
			jwt: jwt(privateKey, publicKey),
			createToken(payload, expire) {
				return this.jwt.createToken(Object.assign({}, payload, {
					iat: Date.now(),
					exp: Date.now() + expire
				}), alg);
			}
		}

	//the combinator which can be used to create different endpoints
	//for different methods of authentication
	return (serviceInfo) => {
		//defaultResult :: (a -> WebPart) -> a -> WebPart
		const defaultResult = expr { n => r => n(r) || (OK(r) >=> mime('text/plain')) };

		const expiry = serviceInfo.expirationTime;

		const {path, service, resultMapper, errorMapper} = commonChecks(
			'authService', 'IAuthService', 'authenticate', defaultResult,
			serviceInfo
		);

		if (typeof expiry !== 'number')
			throw new Error('The expiration time for authService must be a number');

		//authenticates a user and sends them their token
		function runAuthentication(context) {
			return Async.try(do Async {
				command = context.request.form
				//authentication result from the service
				res <- service.authenticate(command)

				token <- Async.fromEither(auth.createToken(res, expiry))

				return OK(token) >=> mime('text/plain')
			})
			.catch(e => Async.of(errorMapper(e)))
			.chain(wp => wp(context));
		}

		//filter out bad requests and then run the authentication
		//service and JWT creation on the rest
		return expr {
			F.POST >=> F.path(path) >=> runAuthentication
		};
	}
}

/**
 *	queryService :: (string, string, string, IBlackList) -> (string, IQueryService, IErrorMapper) -> WebPart
 *
 *	Constructs a combinator that wraps IQueryServices into WebParts.
 *
 *	If the crypto information is undefined, then no authentication is used on the
 *	returned WebParts. Just like in writeService, it is up to the IQueryService to
 *	perform authorization on protected queries.
 *
 *	GET and HEAD requests at the specified path will be allowed through.
 *
 *	The result of the IQueryService will be mapped into a WebPart as follows
 *		Errors go through the specified IErrorMapper
 *		Files get downloaded
 *		Event streams/Observables get turned into server-sent events
 *		Anything else gets serialized to JSON and sent as 200 OK.
 */
exports.queryService = function(privateKey, publicKey, alg, blacklist) {
	//authentication WebPart or undefined
	const authenticate = makeAuth(privateKey, publicKey, alg, blacklist);

	//combinator to create query service endpoints
	return (serviceInfo) => {
		//responseToWebPart :: (a -> WebPart) -> a -> WebPart
		const defaultResult = nextResult => response => {
			//try the custom result mapper first
			const result = nextResult(response);
			if (result)
				return result;

			//otherwise use our mapper

			//download files
			if (typeof response === 'object'
				&& response.size && response.stream
				&& response.name) {
				return Files.download(response);
			}
			//use server-sent events on event streams
			else if (typeof response === 'object'
				&& typeof response.subscribe === 'function') {
				return Events.toEventStream(response);
			}
			//otherwise JSON serialize and use OK 200
			else {
				return expr {
					OK(JSON.stringify(response)) >=> mime('application/json')
				};
			}
		}

		const {path, service, resultMapper, errorMapper} = commonChecks(
			'queryService', 'IQueryService', 'query', defaultResult,
			serviceInfo
		);

		//runQuery :: WebPart
		function runQuery(context) {
			return Async.try(do Async {
				query = context.request.query
				userDetails = context.userToken

				res <- service.query(query, userDetails)

				return resultMapper(res)
			})
			.catch(e => Async.of(errorMapper(e)))
			.chain(wp => wp(context));
		}

		//filter out bad requests and then run queries after
		//optional authentication
		return expr {
			F.GET <|> F.HEAD >=> F.path(path) >=>
				if (authenticate)
					authenticate(runQuery, errorMapper)
				else
					runQuery
		};
	}
}

function isAuthenticator(x) {
	return typeof x === 'function';
}

/**
 *	makeAuth :: CryptoInformation | Authenticator -> Authenticator | null
 *
 *	Makes an authenticator from the CryptoInformation, if it is valid,
 *	or returns null.
 *
 *	If an Authenticator is provided, it is returned.
 */
function makeAuth(privateKey, publicKey, alg, blacklist) {
	return isAuthenticator(privateKey) ? privateKey :
		(privateKey && publicKey && alg && 
			A.authenticateJWT(privateKey, publicKey, alg, blacklist));
}

function commonChecks(combName, serviceType, method, defaultResult, serviceInfo) {
		const defaultError = expr {
			nextMapper => e => mime('application/json') >=> caseOf(e, {
				AuthenticationError: e => nextMapper(e) ||
					FORBIDDEN(JSON.stringify(e.message)),
				default: e => nextMapper(e) ||
					INTERNAL_ERROR(JSON.stringify(e.message)),
			})
		};

		const path = serviceInfo.path;
		const service = serviceInfo.service;
		const resultMapper = defaultResult(serviceInfo.resultMapper || (x => null));
		const errorMapper = defaultError(serviceInfo.errorMapper || (x => null));

		if (typeof path !== 'string')
			throw new Error('Path for '+combName+' must be a string');

		if (typeof service !== 'object'
			|| typeof service[method] !== 'function')
			throw new Error('The service for '+combName+' must be an '+serviceType);

		return {
			path,
			service,
			resultMapper,
			errorMapper
		};
}